# : << EOF
# # /!\ do not remove the previous line
# ---------------------------------- System ----------------------------------
# Change terminal type ($TERM) to xterm-256color.
set -g default-terminal "xterm-256color"
# Faster command sequences.
set -s escape-time 10
# Change prefix to C-a.
set-option -g prefix C-a
unbind-key C-a
bind-key C-a send-prefix
# Start windows numbering at 1.
set -g base-index 1
# Make pane numbering consistent with windows.
setw -g pane-base-index 1
# Increase scrollback lines.
set -g history-limit 10000
# Easy config reload.
bind-key r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded."

# ------------------------------- Nested Tmux --------------------------------
# Initialize variables for the left status bar.
active_marker="#[fg=colour50]* "
inactive_marker="  "
status_local="#[fg=colour255,bg=colour232]  local"
status_remote="#[fg=colour255,bg=colour232] remote"
# The following makes it such that we can easily swap "focus" between local
# and remote tmux sessions. That is, easily switch which tmux session has C-a
# as the prefix.
bind -n M-F11 set -qg status-left "$status_remote$inactive_marker"
bind -n M-F12 set -qg status-left "$status_remote$active_marker"
bind -n S-up \
    send-keys M-F12 \; \
    set -qg status-left "$status_local$inactive_marker" \; \
    set -qg prefix C-b
bind -n S-down \
    send-keys M-F11 \; \
    set -qg status-left "$status_local$active_marker" \; \
    set -qg prefix C-a

# ------------------------------ User Interface ------------------------------
set -g status-position bottom
set -g status-bg colour234
set -g status-fg colour137
# Initialize the left status bar depending if the session is local or remote.
# The session is considered to be remote when the session is on a remote host.
# Remote session.
if-shell 'test -n "$SSH_CLIENT"' \
    'set -g status-left "$status_remote$inactive_marker"'
# Local session.
if-shell '! test -n "$SSH_CLIENT"' \
    'set -g status-left "$status_local$active_marker"'
set -g status-right '#[fg=colour233,bg=colour241,bold] %d/%m #[fg=colour233,bg=colour245,bold] %H:%M:%S '
set -g status-right-length 50
set -g status-left-length 20
setw -g window-status-current-format ' #I#[fg=colour250]:#[fg=colour255]#W#[fg=colour50]#F '
setw -g window-status-format ' #I#[fg=colour237]:#[fg=colour250]#W#[fg=colour244]#F '

# --------------------------------- Copy Mode --------------------------------
# Enable vi mode.
setw -g mode-keys vi
# Change copy mode paste mapping.
bind-key p paste-buffer
# Show tmux clipboard history.
bind-key P choose-buffer
# Delete latest tmux clipboard buffer.
bind-key + delete-buffer \; display-message "Deleted latest tmux clipboard paste buffer"
# vim-like mapping to begin selection (i.e. just like Visual Mode).
bind-key -T copy-mode-vi v send-keys -X begin-selection
# vim-like mapping to select current line (i.e. just like Visual Line Mode).
bind-key -T copy-mode-vi V send-keys -X select-line
# vim-like mapping to select block (i.e. just like Visual Block Mode).
bind-key -T copy-mode-vi C-v send-keys -X begin-selection \; send-keys -X rectangle-toggle
# Copy current selection into tmux clipboard and into system clipboard.
bind-key -T copy-mode-vi y send-keys -X copy-pipe "xclip -in -selection clipboard"
# Make vim-oscyank work with tmux.
set -s set-clipboard on

# ------------------------------- Panes/Windows ------------------------------
# vim-like window/pane switching.
bind -r ^ last-window
bind -r k select-pane -U
bind -r j select-pane -D
bind -r h select-pane -L
bind -r l select-pane -R
# Set pane resizing keybindings.
bind-key -r M-k resize-pane -U 5
bind-key -r M-j resize-pane -D 5
bind-key -r M-h resize-pane -L 5
bind-key -r M-l resize-pane -R 5
# Set pane swapping keybindings.
bind > swap-pane -D
bind < swap-pane -U
# Differentiate active and inactive panes.
set -g display-panes-colour white
set -g display-panes-active-colour green
# Window navigation, replace p & n with C-h and C-l respectively.
unbind p
unbind n
bind -r C-h previous-window
bind -r C-l next-window
# vim-like window splitting.
bind-key v split-window -h
bind-key s split-window -v
# Move current window left or right (swap).
bind -n S-left \
    swap-window -t -1 \; \
    previous-window
bind -n S-right \
    swap-window -t +1 \; \
    next-window

# ----------------------------------- Mouse ----------------------------------
# Enable mouse mode by default.
setw -g mouse on
# Set keybinding to toggle mouse mode.
bind m run "cut -c3- ~/.tmux.conf | sh -s _toggle_mouse"

# ---------------------------------- Scripts ---------------------------------
# # /!\ do not remove the following line
# EOF
#
# _toggle_mouse() {
#   old=$(tmux show -gv mouse)
#   new=""
#
#   if [ "$old" = "on" ]; then
#     new="off"
#   else
#     new="on"
#   fi
#
#   tmux set -g mouse $new
# }
#
# "$@"
# # /!\ do not remove the previous line
